{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\clent\\\\OneDrive\\\\Desktop\\\\Weather\\\\weather-weather\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = '6a4306a0f2c73c28dc5c3bbf739e87d0'; // Your OpenWeatherMap API key\n\n// Function to fetch daily weather data based on latitude, longitude, and API key\nfunction fetchDailyWeather(lat, lon, apiKey) {\n  return fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}`).then(response => response.json()).then(data => {\n    const dailyWeather = {};\n    data.list.forEach(entry => {\n      const date = new Date(entry.dt * 1000).toISOString().split('T')[0];\n      if (!dailyWeather[date]) {\n        dailyWeather[date] = {\n          temperatures: [],\n          weatherConditions: []\n        };\n      }\n      dailyWeather[date].temperatures.push(entry.main.temp);\n      dailyWeather[date].weatherConditions.push(entry.weather[0].main);\n    });\n    return Object.keys(dailyWeather).map(day => {\n      const {\n        temperatures,\n        weatherConditions\n      } = dailyWeather[day];\n      const maxTemp = Math.max(...temperatures);\n      const minTemp = Math.min(...temperatures);\n      const mostCommonCondition = weatherConditions.sort((a, b) => weatherConditions.filter(v => v === a).length - weatherConditions.filter(v => v === b).length).pop();\n      return {\n        date: day,\n        maxTemp,\n        minTemp,\n        condition: mostCommonCondition\n      };\n    });\n  });\n}\n\n// Function to fetch latitude and longitude based on location name\nfunction fetchCoordinates(location, apiKey) {\n  return fetch(`https://geocoding-api.open-meteo.com/v1/search?name=${location}`).then(response => response.json()).then(data => {\n    const {\n      latitude,\n      longitude\n    } = data.results[0];\n    return {\n      latitude,\n      longitude\n    };\n  });\n}\n\n// Main component for displaying weather forecast\nfunction WeatherForecast() {\n  _s();\n  const [dailySummaries, setDailySummaries] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [location, setLocation] = useState(''); // State to manage the search query\n  const [error, setError] = useState(null); // State to handle errors\n\n  useEffect(() => {\n    if (!location) return; // Don't fetch if location is empty\n\n    const fetchWeather = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        // Fetch coordinates for the given location\n        const {\n          latitude,\n          longitude\n        } = await fetchCoordinates(location, apiKey);\n        // Fetch daily weather data using the coordinates\n        const summaries = await fetchDailyWeather(latitude, longitude, apiKey);\n        setDailySummaries(summaries);\n      } catch (err) {\n        setError('Error fetching weather data.');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchWeather();\n  }, [location]); // Fetch weather data whenever the location changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Daily Weather Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter location...\",\n      value: location,\n      onChange: e => setLocation(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setLocation(location),\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this), !loading && !error && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: dailySummaries.map(summary => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Date: \", summary.date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Max Temperature: \", Math.ceil(summary.maxTemp), \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Min Temperature: \", Math.floor(summary.minTemp), \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Condition: \", summary.condition]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this)]\n      }, summary.date, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherForecast, \"jGReniX1aCBudKRO7k4IoZkEhPc=\");\n_c = WeatherForecast;\nexport default WeatherForecast;\nvar _c;\n$RefreshReg$(_c, \"WeatherForecast\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","apiKey","fetchDailyWeather","lat","lon","fetch","then","response","json","data","dailyWeather","list","forEach","entry","date","Date","dt","toISOString","split","temperatures","weatherConditions","push","main","temp","weather","Object","keys","map","day","maxTemp","Math","max","minTemp","min","mostCommonCondition","sort","a","b","filter","v","length","pop","condition","fetchCoordinates","location","latitude","longitude","results","WeatherForecast","_s","dailySummaries","setDailySummaries","loading","setLoading","setLocation","error","setError","fetchWeather","summaries","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","summary","ceil","floor","_c","$RefreshReg$"],"sources":["C:/Users/clent/OneDrive/Desktop/Weather/weather-weather/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst apiKey = '6a4306a0f2c73c28dc5c3bbf739e87d0'; // Your OpenWeatherMap API key\n\n// Function to fetch daily weather data based on latitude, longitude, and API key\nfunction fetchDailyWeather(lat, lon, apiKey) {\n  return fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}`)\n    .then(response => response.json())\n    .then(data => {\n      const dailyWeather = {};\n\n      data.list.forEach(entry => {\n        const date = new Date(entry.dt * 1000).toISOString().split('T')[0];\n        if (!dailyWeather[date]) {\n          dailyWeather[date] = { temperatures: [], weatherConditions: [] };\n        }\n\n        dailyWeather[date].temperatures.push(entry.main.temp);\n        dailyWeather[date].weatherConditions.push(entry.weather[0].main);\n      });\n\n      return Object.keys(dailyWeather).map(day => {\n        const { temperatures, weatherConditions } = dailyWeather[day];\n        const maxTemp = Math.max(...temperatures);\n        const minTemp = Math.min(...temperatures);\n        const mostCommonCondition = weatherConditions\n          .sort((a, b) =>\n            weatherConditions.filter(v => v === a).length -\n            weatherConditions.filter(v => v === b).length\n          )\n          .pop();\n\n        return {\n          date: day,\n          maxTemp,\n          minTemp,\n          condition: mostCommonCondition,\n        };\n      });\n    });\n}\n\n// Function to fetch latitude and longitude based on location name\nfunction fetchCoordinates(location, apiKey) {\n  return fetch(`https://geocoding-api.open-meteo.com/v1/search?name=${location}`)\n    .then(response => response.json())\n    .then(data => {\n      const { latitude, longitude } = data.results[0];\n      return { latitude, longitude };\n    });\n}\n\n// Main component for displaying weather forecast\nfunction WeatherForecast() {\n  const [dailySummaries, setDailySummaries] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [location, setLocation] = useState(''); // State to manage the search query\n  const [error, setError] = useState(null); // State to handle errors\n\n  useEffect(() => {\n    if (!location) return; // Don't fetch if location is empty\n\n    const fetchWeather = async () => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        // Fetch coordinates for the given location\n        const { latitude, longitude } = await fetchCoordinates(location, apiKey);\n        // Fetch daily weather data using the coordinates\n        const summaries = await fetchDailyWeather(latitude, longitude, apiKey);\n        setDailySummaries(summaries);\n      } catch (err) {\n        setError('Error fetching weather data.');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchWeather();\n  }, [location]); // Fetch weather data whenever the location changes\n\n  return (\n    <div>\n      <h1>Daily Weather Forecast</h1>\n      <input\n        type=\"text\"\n        placeholder=\"Enter location...\"\n        value={location}\n        onChange={(e) => setLocation(e.target.value)}\n      />\n      <button onClick={() => setLocation(location)}>Search</button>\n\n      {loading && <p>Loading...</p>}\n      {error && <p>{error}</p>}\n      {!loading && !error && (\n        <ul>\n          {dailySummaries.map(summary => (\n            <li key={summary.date}>\n              <p>Date: {summary.date}</p>\n              <p>Max Temperature: {Math.ceil(summary.maxTemp)}°C</p>\n              <p>Min Temperature: {Math.floor(summary.minTemp)}°C</p>\n              <p>Condition: {summary.condition}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default WeatherForecast;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,MAAM,GAAG,kCAAkC,CAAC,CAAC;;AAEnD;AACA,SAASC,iBAAiBA,CAACC,GAAG,EAAEC,GAAG,EAAEH,MAAM,EAAE;EAC3C,OAAOI,KAAK,CAAC,wDAAwDF,GAAG,QAAQC,GAAG,UAAUH,MAAM,EAAE,CAAC,CACnGK,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACZ,MAAMC,YAAY,GAAG,CAAC,CAAC;IAEvBD,IAAI,CAACE,IAAI,CAACC,OAAO,CAACC,KAAK,IAAI;MACzB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,KAAK,CAACG,EAAE,GAAG,IAAI,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAClE,IAAI,CAACR,YAAY,CAACI,IAAI,CAAC,EAAE;QACvBJ,YAAY,CAACI,IAAI,CAAC,GAAG;UAAEK,YAAY,EAAE,EAAE;UAAEC,iBAAiB,EAAE;QAAG,CAAC;MAClE;MAEAV,YAAY,CAACI,IAAI,CAAC,CAACK,YAAY,CAACE,IAAI,CAACR,KAAK,CAACS,IAAI,CAACC,IAAI,CAAC;MACrDb,YAAY,CAACI,IAAI,CAAC,CAACM,iBAAiB,CAACC,IAAI,CAACR,KAAK,CAACW,OAAO,CAAC,CAAC,CAAC,CAACF,IAAI,CAAC;IAClE,CAAC,CAAC;IAEF,OAAOG,MAAM,CAACC,IAAI,CAAChB,YAAY,CAAC,CAACiB,GAAG,CAACC,GAAG,IAAI;MAC1C,MAAM;QAAET,YAAY;QAAEC;MAAkB,CAAC,GAAGV,YAAY,CAACkB,GAAG,CAAC;MAC7D,MAAMC,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGZ,YAAY,CAAC;MACzC,MAAMa,OAAO,GAAGF,IAAI,CAACG,GAAG,CAAC,GAAGd,YAAY,CAAC;MACzC,MAAMe,mBAAmB,GAAGd,iBAAiB,CAC1Ce,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KACTjB,iBAAiB,CAACkB,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKH,CAAC,CAAC,CAACI,MAAM,GAC7CpB,iBAAiB,CAACkB,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKF,CAAC,CAAC,CAACG,MACzC,CAAC,CACAC,GAAG,CAAC,CAAC;MAER,OAAO;QACL3B,IAAI,EAAEc,GAAG;QACTC,OAAO;QACPG,OAAO;QACPU,SAAS,EAAER;MACb,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACN;;AAEA;AACA,SAASS,gBAAgBA,CAACC,QAAQ,EAAE3C,MAAM,EAAE;EAC1C,OAAOI,KAAK,CAAC,uDAAuDuC,QAAQ,EAAE,CAAC,CAC5EtC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACZ,MAAM;MAAEoC,QAAQ;MAAEC;IAAU,CAAC,GAAGrC,IAAI,CAACsC,OAAO,CAAC,CAAC,CAAC;IAC/C,OAAO;MAAEF,QAAQ;MAAEC;IAAU,CAAC;EAChC,CAAC,CAAC;AACN;;AAEA;AACA,SAASE,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGtD,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACuD,OAAO,EAAEC,UAAU,CAAC,GAAGxD,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAC+C,QAAQ,EAAEU,WAAW,CAAC,GAAGzD,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAAC0D,KAAK,EAAEC,QAAQ,CAAC,GAAG3D,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1CC,SAAS,CAAC,MAAM;IACd,IAAI,CAAC8C,QAAQ,EAAE,OAAO,CAAC;;IAEvB,MAAMa,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/BJ,UAAU,CAAC,IAAI,CAAC;MAChBG,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF;QACA,MAAM;UAAEX,QAAQ;UAAEC;QAAU,CAAC,GAAG,MAAMH,gBAAgB,CAACC,QAAQ,EAAE3C,MAAM,CAAC;QACxE;QACA,MAAMyD,SAAS,GAAG,MAAMxD,iBAAiB,CAAC2C,QAAQ,EAAEC,SAAS,EAAE7C,MAAM,CAAC;QACtEkD,iBAAiB,CAACO,SAAS,CAAC;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZH,QAAQ,CAAC,8BAA8B,CAAC;QACxCI,OAAO,CAACL,KAAK,CAACI,GAAG,CAAC;MACpB,CAAC,SAAS;QACRN,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDI,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACb,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,oBACE5C,OAAA;IAAA6D,QAAA,gBACE7D,OAAA;MAAA6D,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BjE,OAAA;MACEkE,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,mBAAmB;MAC/BC,KAAK,EAAExB,QAAS;MAChByB,QAAQ,EAAGC,CAAC,IAAKhB,WAAW,CAACgB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eACFjE,OAAA;MAAQwE,OAAO,EAAEA,CAAA,KAAMlB,WAAW,CAACV,QAAQ,CAAE;MAAAiB,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAE5Db,OAAO,iBAAIpD,OAAA;MAAA6D,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAC5BV,KAAK,iBAAIvD,OAAA;MAAA6D,QAAA,EAAIN;IAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvB,CAACb,OAAO,IAAI,CAACG,KAAK,iBACjBvD,OAAA;MAAA6D,QAAA,EACGX,cAAc,CAACvB,GAAG,CAAC8C,OAAO,iBACzBzE,OAAA;QAAA6D,QAAA,gBACE7D,OAAA;UAAA6D,QAAA,GAAG,QAAM,EAACY,OAAO,CAAC3D,IAAI;QAAA;UAAAgD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3BjE,OAAA;UAAA6D,QAAA,GAAG,mBAAiB,EAAC/B,IAAI,CAAC4C,IAAI,CAACD,OAAO,CAAC5C,OAAO,CAAC,EAAC,OAAE;QAAA;UAAAiC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACtDjE,OAAA;UAAA6D,QAAA,GAAG,mBAAiB,EAAC/B,IAAI,CAAC6C,KAAK,CAACF,OAAO,CAACzC,OAAO,CAAC,EAAC,OAAE;QAAA;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACvDjE,OAAA;UAAA6D,QAAA,GAAG,aAAW,EAACY,OAAO,CAAC/B,SAAS;QAAA;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAJ9BQ,OAAO,CAAC3D,IAAI;QAAAgD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKjB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAChB,EAAA,CAzDQD,eAAe;AAAA4B,EAAA,GAAf5B,eAAe;AA2DxB,eAAeA,eAAe;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}