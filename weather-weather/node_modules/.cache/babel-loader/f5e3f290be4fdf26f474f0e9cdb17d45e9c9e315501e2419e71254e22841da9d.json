{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\clent\\\\OneDrive\\\\Desktop\\\\Weather\\\\weather-weather\\\\src\\\\components\\\\Weatherforcast.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WeatherForecast() {\n  _s();\n  const [forecast, setForecast] = useState(null);\n  const [error, setError] = useState(null);\n  const lat = 'YOUR_LATITUDE'; // Replace with actual latitude\n  const lon = 'YOUR_LONGITUDE'; // Replace with actual longitude\n  const appid = \"6a4306a0f2c73c28dc5c3bbf739e87d0\";\n  useEffect(() => {\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${appid}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => setForecast(data)).catch(error => setError(error.message));\n  }, [lat, lon, appid]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n  if (!forecast) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: forecast.list.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [new Date(item.dt_txt).toLocaleString(), \": \", item.weather[0].description, \", Temp: \", item.main.temp, \"K\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherForecast, \"jCBlIVyvfYcV0Po1UOiKT0Knui0=\");\n_c = WeatherForecast;\nvar _c;\n$RefreshReg$(_c, \"WeatherForecast\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WeatherForecast","_s","forecast","setForecast","error","setError","lat","lon","appid","fetch","then","response","ok","Error","json","data","catch","message","children","fileName","_jsxFileName","lineNumber","columnNumber","list","map","item","index","Date","dt_txt","toLocaleString","weather","description","main","temp","_c","$RefreshReg$"],"sources":["C:/Users/clent/OneDrive/Desktop/Weather/weather-weather/src/components/Weatherforcast.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nexport default function WeatherForecast() {\r\n  const [forecast, setForecast] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const lat = 'YOUR_LATITUDE'; // Replace with actual latitude\r\n  const lon = 'YOUR_LONGITUDE'; // Replace with actual longitude\r\n  const appid = \"6a4306a0f2c73c28dc5c3bbf739e87d0\";\r\n\r\n  useEffect(() => {\r\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${appid}`)\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => setForecast(data))\r\n\r\n      \r\n      .catch(error => setError(error.message));\r\n  }, [lat, lon, appid]);\r\n\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  if (!forecast) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Weather Forecast</h1>\r\n      <ul>\r\n        {forecast.list.map((item, index) => (\r\n          <li key={index}>\r\n            {new Date(item.dt_txt).toLocaleString()}: {item.weather[0].description}, Temp: {item.main.temp}K\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,eAAe,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACxC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMU,GAAG,GAAG,eAAe,CAAC,CAAC;EAC7B,MAAMC,GAAG,GAAG,gBAAgB,CAAC,CAAC;EAC9B,MAAMC,KAAK,GAAG,kCAAkC;EAEhDX,SAAS,CAAC,MAAM;IACdY,KAAK,CAAC,wDAAwDH,GAAG,QAAQC,GAAG,UAAUC,KAAK,EAAE,CAAC,CAC3FE,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAIZ,WAAW,CAACY,IAAI,CAAC,CAAC,CAG/BC,KAAK,CAACZ,KAAK,IAAIC,QAAQ,CAACD,KAAK,CAACa,OAAO,CAAC,CAAC;EAC5C,CAAC,EAAE,CAACX,GAAG,EAAEC,GAAG,EAAEC,KAAK,CAAC,CAAC;EAErB,IAAIJ,KAAK,EAAE;IACT,oBAAOL,OAAA;MAAAmB,QAAA,GAAK,SAAO,EAACd,KAAK;IAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAClC;EAEA,IAAI,CAACpB,QAAQ,EAAE;IACb,oBAAOH,OAAA;MAAAmB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,oBACEvB,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBvB,OAAA;MAAAmB,QAAA,EACGhB,QAAQ,CAACqB,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC7B3B,OAAA;QAAAmB,QAAA,GACG,IAAIS,IAAI,CAACF,IAAI,CAACG,MAAM,CAAC,CAACC,cAAc,CAAC,CAAC,EAAC,IAAE,EAACJ,IAAI,CAACK,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW,EAAC,UAAQ,EAACN,IAAI,CAACO,IAAI,CAACC,IAAI,EAAC,GACjG;MAAA,GAFSP,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACrB,EAAA,CAzCuBD,eAAe;AAAAkC,EAAA,GAAflC,eAAe;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}