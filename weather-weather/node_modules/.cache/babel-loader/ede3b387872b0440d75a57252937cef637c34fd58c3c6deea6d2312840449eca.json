{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\clent\\\\OneDrive\\\\Desktop\\\\Weather\\\\weather-weather\\\\src\\\\components\\\\CurrentLocation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CurrentLocation() {\n  _s();\n  //taking control of the Location\n  const [location, setLocation] = useState(null);\n  useEffect(() => {\n    async function fetchCurrentLocation() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(async position => {\n          const lat = position.coords.latitude;\n          const lon = position.coords.longitude;\n          const appid = \"6a4306a0f2c73c28dc5c3bbf739e87d0\";\n          try {\n            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${appid}`);\n            const data = await response.json();\n            console.log(data);\n            //taking control of the data that is fetched using the array\n            setLocation(data);\n            // Save location data to sessionStorage\n            StoreLocation(lat, lon);\n          } catch (error) {\n            console.error('Error fetching the location data:', error);\n          }\n        }, () => {\n          alert('No location detected ðŸ˜”');\n        });\n      } else {\n        alert('Geolocation is not supported by this browser.');\n      }\n    }\n    fetchCurrentLocation();\n  }, []);\n\n  // Save data into sessionStorage\n  function StoreLocation(lat, lon) {\n    const LocationCurrent = {\n      lat,\n      lon\n    };\n    localStorage.setItem('MyLocation', JSON.stringify(LocationCurrent));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: location ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Your Current Location: \", location.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: location.main.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: item.weather\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n_s(CurrentLocation, \"PTP6gujMiAtYQq3RoMoVBEZNym0=\");\n_c = CurrentLocation;\nvar _c;\n$RefreshReg$(_c, \"CurrentLocation\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","CurrentLocation","_s","location","setLocation","fetchCurrentLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","appid","response","fetch","data","json","console","log","StoreLocation","error","alert","LocationCurrent","localStorage","setItem","JSON","stringify","children","name","fileName","_jsxFileName","lineNumber","columnNumber","main","map","item","weather","id","_c","$RefreshReg$"],"sources":["C:/Users/clent/OneDrive/Desktop/Weather/weather-weather/src/components/CurrentLocation.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nexport default function CurrentLocation() {\r\n    //taking control of the Location\r\n    const [location, setLocation] = useState(null);\r\n\r\n    useEffect(() => {\r\n        async function fetchCurrentLocation() {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition(async (position) => {\r\n                    const lat = position.coords.latitude;\r\n                    const lon = position.coords.longitude;\r\n                    const appid = \"6a4306a0f2c73c28dc5c3bbf739e87d0\";\r\n\r\n                    try {\r\n                        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${appid}`);\r\n                        const data = await response.json();\r\n                        console.log(data);\r\n                        //taking control of the data that is fetched using the array\r\n                        setLocation(data);\r\n                        // Save location data to sessionStorage\r\n                        StoreLocation(lat, lon);\r\n                    } catch (error) {\r\n                        console.error('Error fetching the location data:', error);\r\n                    }\r\n                }, () => {\r\n                    alert('No location detected ðŸ˜”');\r\n                });\r\n            } else {\r\n                alert('Geolocation is not supported by this browser.');\r\n            }\r\n        }\r\n        fetchCurrentLocation();\r\n    }, []);\r\n\r\n    // Save data into sessionStorage\r\n    function StoreLocation(lat, lon) {\r\n        const LocationCurrent = { lat, lon };\r\n        localStorage.setItem('MyLocation', JSON.stringify(LocationCurrent));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {location ? (\r\n                <>\r\n                    <h1>Your Current Location: {location.name}</h1>\r\n                    <ul>\r\n                        {location.main.map((item) => (\r\n                            <li key={item.id}>{item.weather}</li>\r\n                        ))}\r\n                    </ul>\r\n                </>\r\n            ) : (\r\n                <h1>Loading...</h1>\r\n            )}\r\n        </div>\r\n    );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnD,eAAe,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACtC;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACZ,eAAeU,oBAAoBA,CAAA,EAAG;MAClC,IAAIC,SAAS,CAACC,WAAW,EAAE;QACvBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAC,MAAOC,QAAQ,IAAK;UACzD,MAAMC,GAAG,GAAGD,QAAQ,CAACE,MAAM,CAACC,QAAQ;UACpC,MAAMC,GAAG,GAAGJ,QAAQ,CAACE,MAAM,CAACG,SAAS;UACrC,MAAMC,KAAK,GAAG,kCAAkC;UAEhD,IAAI;YACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uDAAuDP,GAAG,QAAQG,GAAG,UAAUE,KAAK,EAAE,CAAC;YACpH,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;YAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;YACjB;YACAd,WAAW,CAACc,IAAI,CAAC;YACjB;YACAI,aAAa,CAACZ,GAAG,EAAEG,GAAG,CAAC;UAC3B,CAAC,CAAC,OAAOU,KAAK,EAAE;YACZH,OAAO,CAACG,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;UAC7D;QACJ,CAAC,EAAE,MAAM;UACLC,KAAK,CAAC,yBAAyB,CAAC;QACpC,CAAC,CAAC;MACN,CAAC,MAAM;QACHA,KAAK,CAAC,+CAA+C,CAAC;MAC1D;IACJ;IACAnB,oBAAoB,CAAC,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,SAASiB,aAAaA,CAACZ,GAAG,EAAEG,GAAG,EAAE;IAC7B,MAAMY,eAAe,GAAG;MAAEf,GAAG;MAAEG;IAAI,CAAC;IACpCa,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAACJ,eAAe,CAAC,CAAC;EACvE;EAEA,oBACI3B,OAAA;IAAAgC,QAAA,EACK3B,QAAQ,gBACLL,OAAA,CAAAE,SAAA;MAAA8B,QAAA,gBACIhC,OAAA;QAAAgC,QAAA,GAAI,yBAAuB,EAAC3B,QAAQ,CAAC4B,IAAI;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC/CrC,OAAA;QAAAgC,QAAA,EACK3B,QAAQ,CAACiC,IAAI,CAACC,GAAG,CAAEC,IAAI,iBACpBxC,OAAA;UAAAgC,QAAA,EAAmBQ,IAAI,CAACC;QAAO,GAAtBD,IAAI,CAACE,EAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAoB,CACvC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA,eACP,CAAC,gBAEHrC,OAAA;MAAAgC,QAAA,EAAI;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EACrB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACjC,EAAA,CAvDuBD,eAAe;AAAAwC,EAAA,GAAfxC,eAAe;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}