{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\clent\\\\OneDrive\\\\Desktop\\\\Weather\\\\weather-weather\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\"; // Added useEffect to load cached data on startup\nimport Header from \"./components/Header\";\nimport CurrentLocation from \"./components/CurrentLocation\";\n\n// Function to get the weather icon based on WMO code\n// (function remains the same)\n\n// Function to convert a country code to its corresponding flag emoji\n// (function remains the same)\n\n// Function to format a date string into the day of the week (e.g., \"Mon\", \"Tue\")\n// (function remains the same)\n\n// Main App component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // useState hooks for location, loading status, display location, weather data, and error state\n  const [location, setLocation] = useState(\"lisbon\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [displayLocation, setDisplayLocation] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [error, setError] = useState(null);\n\n  // Function to fetch weather data based on the location\n  async function fetchWeather() {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // 1) Check if there's cached data for the location\n      const cachedData = localStorage.getItem(`weather_${location}`);\n      if (cachedData) {\n        const {\n          weather,\n          timestamp\n        } = JSON.parse(cachedData);\n\n        // Check if cached data is fresh (e.g., within the last 6 hours)\n        if (Date.now() - timestamp < 6 * 60 * 60 * 1000) {\n          setWeather(weather);\n          setDisplayLocation(location);\n          setIsLoading(false);\n          return;\n        }\n      }\n\n      // 2) Fetch the location (geocoding) data if no fresh cache\n      const geoRes = await fetch(`https://geocoding-api.open-meteo.com/v1/search?name=${location}`);\n      const geoData = await geoRes.json();\n      if (!geoData.results) {\n        setError(\"Location not found\");\n        throw new Error(\"Location not found\");\n      }\n      const {\n        latitude,\n        longitude,\n        timezone,\n        name,\n        country_code\n      } = geoData.results.at(0);\n      setDisplayLocation(`${name} ${convertToFlag(country_code)}`);\n\n      // 3) Fetch the actual weather data\n      const weatherRes = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&timezone=${timezone}&daily=weathercode,temperature_2m_max,temperature_2m_min`);\n      const weatherData = await weatherRes.json();\n\n      // Save the data to state\n      setWeather(weatherData.daily);\n\n      // Cache the data in localStorage\n      localStorage.setItem(`weather_${location}`, JSON.stringify({\n        weather: weatherData.daily,\n        timestamp: Date.now()\n      }));\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  // Load cached data on startup\n  useEffect(() => {\n    const cachedData = localStorage.getItem(`weather_${location}`);\n    if (cachedData) {\n      const {\n        weather\n      } = JSON.parse(cachedData);\n      setWeather(weather);\n    }\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      location: location,\n      setLocation: setLocation,\n      fetchWeather: fetchWeather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CurrentLocation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search for location...\",\n      value: location,\n      onChange: e => setLocation(e.target.value),\n      \"aria-label\": \"Search for location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchWeather,\n      \"aria-label\": \"Get weather\",\n      children: \"Get weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }, this), weather.weathercode && /*#__PURE__*/_jsxDEV(Weather, {\n      weather: weather,\n      location: displayLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Z2gkBgfQyDdw33Wt8WAGF5D8cOg=\");\n_c = App;\nexport default App;\n\n// Weather component\n// (remains the same)\n\n// Day component\n// (remains the same)\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","CurrentLocation","jsxDEV","_jsxDEV","App","_s","location","setLocation","isLoading","setIsLoading","displayLocation","setDisplayLocation","weather","setWeather","error","setError","fetchWeather","cachedData","localStorage","getItem","timestamp","JSON","parse","Date","now","geoRes","fetch","geoData","json","results","Error","latitude","longitude","timezone","name","country_code","at","convertToFlag","weatherRes","weatherData","daily","setItem","stringify","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","weathercode","Weather","_c","$RefreshReg$"],"sources":["C:/Users/clent/OneDrive/Desktop/Weather/weather-weather/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\"; // Added useEffect to load cached data on startup\nimport Header from \"./components/Header\";\nimport CurrentLocation from \"./components/CurrentLocation\";\n\n// Function to get the weather icon based on WMO code\n// (function remains the same)\n\n// Function to convert a country code to its corresponding flag emoji\n// (function remains the same)\n\n// Function to format a date string into the day of the week (e.g., \"Mon\", \"Tue\")\n// (function remains the same)\n\n// Main App component\nfunction App() {\n  // useState hooks for location, loading status, display location, weather data, and error state\n  const [location, setLocation] = useState(\"lisbon\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [displayLocation, setDisplayLocation] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [error, setError] = useState(null);\n\n  // Function to fetch weather data based on the location\n  async function fetchWeather() {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // 1) Check if there's cached data for the location\n      const cachedData = localStorage.getItem(`weather_${location}`);\n      if (cachedData) {\n        const { weather, timestamp } = JSON.parse(cachedData);\n        \n        // Check if cached data is fresh (e.g., within the last 6 hours)\n        if (Date.now() - timestamp < 6 * 60 * 60 * 1000) {\n          setWeather(weather);\n          setDisplayLocation(location);\n          setIsLoading(false);\n          return;\n        }\n      }\n\n      // 2) Fetch the location (geocoding) data if no fresh cache\n      const geoRes = await fetch(\n        `https://geocoding-api.open-meteo.com/v1/search?name=${location}`\n      );\n      const geoData = await geoRes.json();\n      if (!geoData.results) {\n        setError(\"Location not found\");\n        throw new Error(\"Location not found\");\n      }\n\n      const { latitude, longitude, timezone, name, country_code } =\n        geoData.results.at(0);\n\n      setDisplayLocation(`${name} ${convertToFlag(country_code)}`);\n\n      // 3) Fetch the actual weather data\n      const weatherRes = await fetch(\n        `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&timezone=${timezone}&daily=weathercode,temperature_2m_max,temperature_2m_min`\n      );\n      const weatherData = await weatherRes.json();\n\n      // Save the data to state\n      setWeather(weatherData.daily);\n\n      // Cache the data in localStorage\n      localStorage.setItem(\n        `weather_${location}`,\n        JSON.stringify({ weather: weatherData.daily, timestamp: Date.now() })\n      );\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  // Load cached data on startup\n  useEffect(() => {\n    const cachedData = localStorage.getItem(`weather_${location}`);\n    if (cachedData) {\n      const { weather } = JSON.parse(cachedData);\n      setWeather(weather);\n    }\n  }, [location]);\n\n  return (\n    <div className=\"app\">\n      <Header location={location} setLocation={setLocation} fetchWeather={fetchWeather} />\n      <CurrentLocation />\n      <input\n        type=\"text\"\n        placeholder=\"Search for location...\"\n        value={location}\n        onChange={(e) => setLocation(e.target.value)}\n        aria-label=\"Search for location\"\n      />\n\n      <button onClick={fetchWeather} aria-label=\"Get weather\">Get weather</button>\n\n      {isLoading && (\n        <div className=\"loader\">\n          <div className=\"spinner\"></div>\n        </div>\n      )}\n\n      {error && <p className=\"error\">{error}</p>}\n\n      {weather.weathercode && (\n        <Weather weather={weather} location={displayLocation} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n// Weather component\n// (remains the same)\n\n// Day component\n// (remains the same)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}