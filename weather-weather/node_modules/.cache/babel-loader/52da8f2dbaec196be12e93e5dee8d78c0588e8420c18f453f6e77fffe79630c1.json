{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\clent\\\\OneDrive\\\\Desktop\\\\Weather\\\\weather-weather\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\"; // Import React and the useState hook\nimport Header from \"./components/Header\";\nimport CurrentLocation from \"./components/CurrentLocation\";\n\n// Function to get the weather icon based on WMO code\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getWeatherIcon(wmoCode) {\n  // Create a map of weather icons associated with WMO codes\n  const icons = new Map([{\n    code: [0],\n    icon: \"☀️\"\n  },\n  // Clear sky\n  {\n    code: [1],\n    icon: \"🌤\"\n  },\n  // Mainly clear\n  {\n    code: [2],\n    icon: \"⛅️\"\n  },\n  // Partly cloudy\n  {\n    code: [3],\n    icon: \"☁️\"\n  },\n  // Overcast\n  {\n    code: [45, 48],\n    icon: \"🌫\"\n  },\n  // Fog and depositing rime fog\n  {\n    code: [51, 53, 55],\n    icon: \"🌦\"\n  },\n  // Drizzle: Light, moderate, and dense intensity\n  {\n    code: [56, 57],\n    icon: \"🌧\"\n  },\n  // Freezing Drizzle: Light and dense intensity\n  {\n    code: [61],\n    icon: \"🌦\"\n  },\n  // Rain: Slight intensity\n  {\n    code: [63],\n    icon: \"🌧\"\n  },\n  // Rain: Moderate intensity\n  {\n    code: [65],\n    icon: \"🌧️\"\n  },\n  // Rain: Heavy intensity\n  {\n    code: [66],\n    icon: \"🌨\"\n  },\n  // Freezing Rain: Light intensity\n  {\n    code: [67],\n    icon: \"🌨️\"\n  },\n  // Freezing Rain: Heavy intensity\n  {\n    code: [71],\n    icon: \"🌨\"\n  },\n  // Snow fall: Slight intensity\n  {\n    code: [73],\n    icon: \"🌨\"\n  },\n  // Snow fall: Moderate intensity\n  {\n    code: [75],\n    icon: \"🌨️\"\n  },\n  // Snow fall: Heavy intensity\n  {\n    code: [77],\n    icon: \"❄️\"\n  },\n  // Snow grains\n  {\n    code: [80],\n    icon: \"🌧\"\n  },\n  // Rain showers: Slight intensity\n  {\n    code: [81],\n    icon: \"🌧️\"\n  },\n  // Rain showers: Moderate intensity\n  {\n    code: [82],\n    icon: \"🌧️\"\n  },\n  // Rain showers: Violent intensity\n  {\n    code: [85],\n    icon: \"🌨\"\n  },\n  // Snow showers: Slight intensity\n  {\n    code: [86],\n    icon: \"🌨️\"\n  },\n  // Snow showers: Heavy intensity\n  {\n    code: [95],\n    icon: \"🌩\"\n  },\n  // Thunderstorm: Slight or moderate\n  {\n    code: [96],\n    icon: \"⛈️\"\n  },\n  // Thunderstorm with slight hail\n  {\n    code: [99],\n    icon: \"⛈️\"\n  },\n  // Thunderstorm with heavy hail\n  {\n    code: [100],\n    icon: \"🌬\"\n  },\n  // Windy conditions\n  {\n    code: [101],\n    icon: \"🌪\"\n  },\n  // Tornado\n  {\n    code: [102],\n    icon: \"🌧️\"\n  },\n  // Rain with thunder\n  {\n    code: [103],\n    icon: \"🌫\"\n  },\n  // Mist\n  {\n    code: [104],\n    icon: \"🌁\"\n  },\n  // Foggy\n  {\n    code: [105],\n    icon: \"🌊\"\n  },\n  // Coastal flood\n  {\n    code: [106],\n    icon: \"🌧️\"\n  },\n  // Heavy rain with thunder\n  {\n    code: [107],\n    icon: \"❄️\"\n  },\n  // Blowing snow\n  {\n    code: [108],\n    icon: \"🌨️\"\n  },\n  // Blizzard\n  {\n    code: [109],\n    icon: \"🌧️\"\n  },\n  // Rain and snow mixed\n  {\n    code: [110],\n    icon: \"🌬\"\n  } // Wind and rain mixed\n  ]);\n\n  // Find the corresponding icon for the provided WMO code\n  const arr = [...icons.keys()].find(key => key.includes(wmoCode));\n  if (!arr) return \"NOT FOUND\"; // Return \"NOT FOUND\" if no icon is found\n  return icons.get(arr); // Return the found icon\n}\n\n// Function to convert a country code to its corresponding flag emoji\nfunction convertToFlag(countryCode) {\n  // Convert each character of the country code to its corresponding Unicode code point\n  const codePoints = countryCode.toUpperCase() // Convert the country code to uppercase\n  .split(\"\") // Split the country code into individual characters\n  .map(char => 127397 + char.charCodeAt()); // Map each character to its flag emoji code point\n\n  // Return the flag emoji string\n  return String.fromCodePoint(...codePoints);\n}\n\n// Function to format a date string into the day of the week (e.g., \"Mon\", \"Tue\")\nfunction formatDay(dateStr) {\n  // Use Intl.DateTimeFormat to format the date string into a short weekday name\n  return new Intl.DateTimeFormat(\"en\", {\n    weekday: \"short\" // Use short format (Mon, Tue, etc.)\n  }).format(new Date(dateStr)); // Create a new Date object from the date string\n}\n\n// Main App component\nfunction App() {\n  _s();\n  // useState hook to manage the state of the location, loading status, display location, and weather data\n  const [location, setLocation] = useState(\"lisbon\"); // Default location is \"lisbon\"\n  const [isLoading, setIsLoading] = useState(false); // Loading status, default is false\n  const [displayLocation, setDisplayLocation] = useState(\"\"); // Display location, initially empty\n  const [weather, setWeather] = useState({}); // Weather data, initially an empty object\n\n  // Function to fetch weather data based on the location\n  async function fetchWeather() {\n    try {\n      setIsLoading(true); // Set loading status to true while fetching data\n\n      // 1) Fetch the location (geocoding) data\n      const geoRes = await fetch(`https://geocoding-api.open-meteo.com/v1/search?name=${location}` // API call to get latitude, longitude, and other info\n      );\n      const geoData = await geoRes.json(); // Parse the JSON response\n      console.log(geoData); // Log the geocoding data for debugging\n\n      if (!geoData.results) throw new Error(\"Location not found\"); // Throw an error if no location is found\n\n      // Destructure the relevant location data from the response\n      const {\n        latitude,\n        longitude,\n        timezone,\n        name,\n        country_code\n      } = geoData.results.at(0); // Use the first result\n\n      // Set the display location with the name and flag emoji\n      setDisplayLocation(`${name} ${convertToFlag(country_code)}`);\n\n      // 2) Fetch the actual weather data based on latitude and longitude\n      const weatherRes = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&timezone=${timezone}&daily=weathercode,temperature_2m_max,temperature_2m_min` // API call for weather data\n      );\n      const weatherData = await weatherRes.json(); // Parse the JSON response\n\n      setWeather(weatherData.daily); // Set the weather data state with the daily forecast\n    } catch (err) {\n      console.error(err); // Log any errors to the console\n    } finally {\n      setIsLoading(false); // Set loading status to false after fetching is complete\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      location: location,\n      setLocation: setLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(CurrentLocation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchWeather,\n      children: \"Get weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), \" \", isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loader\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }, this), \" \", weather.weathercode && /*#__PURE__*/_jsxDEV(Weather, {\n      weather: weather,\n      location: displayLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this) // Display weather if data is available\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JV47jxpI9wiMa2LymRlgN+aLpLE=\");\n_c = App;\nexport default App; // Export the App component as the default export\n\n// Weather component to display the weather information\nfunction Weather({\n  weather,\n  location\n}) {\n  // Destructure weather data properties for easier access\n  const {\n    temperature_2m_max: max,\n    // Maximum temperatures\n    temperature_2m_min: min,\n    // Minimum temperatures\n    time: dates,\n    // Dates\n    weathercode: codes // Weather codes\n  } = weather;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Weather \", location]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"weather\",\n      children: dates.map((date, i) => /*#__PURE__*/_jsxDEV(Day, {\n        date: date // Pass the date to the Day component\n        ,\n        max: max.at(i) // Pass the max temperature for the day\n        ,\n        min: min.at(i) // Pass the min temperature for the day\n        ,\n        code: codes.at(i) // Pass the weather code for the day\n        ,\n\n        // Set a unique key for each list item\n        isToday: i === 0 // Highlight the first item as \"Today\"\n      }, date, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n\n// Day component to display each day's weather information\n_c2 = Weather;\nfunction Day({\n  date,\n  max,\n  min,\n  code,\n  isToday\n}) {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"day\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: getWeatherIcon(code)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: isToday ? \"Today\" : formatDay(date)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [Math.floor(min), \"\\xB0 \\u2014 \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [Math.ceil(max), \"\\xB0\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 40\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}\n_c3 = Day;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Weather\");\n$RefreshReg$(_c3, \"Day\");","map":{"version":3,"names":["React","useState","Header","CurrentLocation","jsxDEV","_jsxDEV","getWeatherIcon","wmoCode","icons","Map","code","icon","arr","keys","find","key","includes","get","convertToFlag","countryCode","codePoints","toUpperCase","split","map","char","charCodeAt","String","fromCodePoint","formatDay","dateStr","Intl","DateTimeFormat","weekday","format","Date","App","_s","location","setLocation","isLoading","setIsLoading","displayLocation","setDisplayLocation","weather","setWeather","fetchWeather","geoRes","fetch","geoData","json","console","log","results","Error","latitude","longitude","timezone","name","country_code","at","weatherRes","weatherData","daily","err","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","weathercode","Weather","_c","temperature_2m_max","max","temperature_2m_min","min","time","dates","codes","date","i","Day","isToday","_c2","Math","floor","ceil","_c3","$RefreshReg$"],"sources":["C:/Users/clent/OneDrive/Desktop/Weather/weather-weather/src/App.js"],"sourcesContent":["import React, { useState } from \"react\"; // Import React and the useState hook\nimport Header from \"./components/Header\";\nimport CurrentLocation from \"./components/CurrentLocation\";\n\n\n// Function to get the weather icon based on WMO code\nfunction getWeatherIcon(wmoCode) {\n  // Create a map of weather icons associated with WMO codes\n  const icons = new Map([\n    { code: [0], icon: \"☀️\" },           // Clear sky\n    { code: [1], icon: \"🌤\" },            // Mainly clear\n    { code: [2], icon: \"⛅️\" },           // Partly cloudy\n    { code: [3], icon: \"☁️\" },           // Overcast\n    { code: [45, 48], icon: \"🌫\" },       // Fog and depositing rime fog\n    { code: [51, 53, 55], icon: \"🌦\" },   // Drizzle: Light, moderate, and dense intensity\n    { code: [56, 57], icon: \"🌧\" },       // Freezing Drizzle: Light and dense intensity\n    { code: [61], icon: \"🌦\" },           // Rain: Slight intensity\n    { code: [63], icon: \"🌧\" },           // Rain: Moderate intensity\n    { code: [65], icon: \"🌧️\" },          // Rain: Heavy intensity\n    { code: [66], icon: \"🌨\" },           // Freezing Rain: Light intensity\n    { code: [67], icon: \"🌨️\" },          // Freezing Rain: Heavy intensity\n    { code: [71], icon: \"🌨\" },           // Snow fall: Slight intensity\n    { code: [73], icon: \"🌨\" },           // Snow fall: Moderate intensity\n    { code: [75], icon: \"🌨️\" },          // Snow fall: Heavy intensity\n    { code: [77], icon: \"❄️\" },          // Snow grains\n    { code: [80], icon: \"🌧\" },           // Rain showers: Slight intensity\n    { code: [81], icon: \"🌧️\" },          // Rain showers: Moderate intensity\n    { code: [82], icon: \"🌧️\" },          // Rain showers: Violent intensity\n    { code: [85], icon: \"🌨\" },           // Snow showers: Slight intensity\n    { code: [86], icon: \"🌨️\" },          // Snow showers: Heavy intensity\n    { code: [95], icon: \"🌩\" },           // Thunderstorm: Slight or moderate\n    { code: [96], icon: \"⛈️\" },          // Thunderstorm with slight hail\n    { code: [99], icon: \"⛈️\" },          // Thunderstorm with heavy hail\n    { code: [100], icon: \"🌬\" },          // Windy conditions\n    { code: [101], icon: \"🌪\" },          // Tornado\n    { code: [102], icon: \"🌧️\" },         // Rain with thunder\n    { code: [103], icon: \"🌫\" },          // Mist\n    { code: [104], icon: \"🌁\" },          // Foggy\n    { code: [105], icon: \"🌊\" },          // Coastal flood\n    { code: [106], icon: \"🌧️\" },         // Heavy rain with thunder\n    { code: [107], icon: \"❄️\" },         // Blowing snow\n    { code: [108], icon: \"🌨️\" },         // Blizzard\n    { code: [109], icon: \"🌧️\" },         // Rain and snow mixed\n    { code: [110], icon: \"🌬\" },          // Wind and rain mixed\n  ]);\n  \n  // Find the corresponding icon for the provided WMO code\n  const arr = [...icons.keys()].find((key) => key.includes(wmoCode));\n  if (!arr) return \"NOT FOUND\"; // Return \"NOT FOUND\" if no icon is found\n  return icons.get(arr); // Return the found icon\n}\n\n// Function to convert a country code to its corresponding flag emoji\nfunction convertToFlag(countryCode) {\n  // Convert each character of the country code to its corresponding Unicode code point\n  const codePoints = countryCode\n    .toUpperCase() // Convert the country code to uppercase\n    .split(\"\") // Split the country code into individual characters\n    .map((char) => 127397 + char.charCodeAt()); // Map each character to its flag emoji code point\n  \n  // Return the flag emoji string\n  return String.fromCodePoint(...codePoints);\n}\n\n// Function to format a date string into the day of the week (e.g., \"Mon\", \"Tue\")\nfunction formatDay(dateStr) {\n  // Use Intl.DateTimeFormat to format the date string into a short weekday name\n  return new Intl.DateTimeFormat(\"en\", {\n    weekday: \"short\", // Use short format (Mon, Tue, etc.)\n  }).format(new Date(dateStr)); // Create a new Date object from the date string\n}\n\n// Main App component\nfunction App() {\n  // useState hook to manage the state of the location, loading status, display location, and weather data\n  const [location, setLocation] = useState(\"lisbon\"); // Default location is \"lisbon\"\n  const [isLoading, setIsLoading] = useState(false); // Loading status, default is false\n  const [displayLocation, setDisplayLocation] = useState(\"\"); // Display location, initially empty\n  const [weather, setWeather] = useState({}); // Weather data, initially an empty object\n\n  // Function to fetch weather data based on the location\n  async function fetchWeather() {\n    try {\n      setIsLoading(true); // Set loading status to true while fetching data\n\n      // 1) Fetch the location (geocoding) data\n      const geoRes = await fetch(\n        `https://geocoding-api.open-meteo.com/v1/search?name=${location}` // API call to get latitude, longitude, and other info\n      );\n      const geoData = await geoRes.json(); // Parse the JSON response\n      console.log(geoData); // Log the geocoding data for debugging\n\n      if (!geoData.results) throw new Error(\"Location not found\"); // Throw an error if no location is found\n\n      // Destructure the relevant location data from the response\n      const { latitude, longitude, timezone, name, country_code } =\n        geoData.results.at(0); // Use the first result\n\n      // Set the display location with the name and flag emoji\n      setDisplayLocation(`${name} ${convertToFlag(country_code)}`);\n\n      // 2) Fetch the actual weather data based on latitude and longitude\n      const weatherRes = await fetch(\n        `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&timezone=${timezone}&daily=weathercode,temperature_2m_max,temperature_2m_min` // API call for weather data\n      );\n      const weatherData = await weatherRes.json(); // Parse the JSON response\n\n      setWeather(weatherData.daily); // Set the weather data state with the daily forecast\n    } catch (err) {\n      console.error(err); // Log any errors to the console\n    } finally {\n      setIsLoading(false); // Set loading status to false after fetching is complete\n    }\n  }\n\n  return (\n    <div className=\"app\">\n  <Header location={location} setLocation={setLocation}/>\n  <CurrentLocation/>\n     \n      <button onClick={fetchWeather}>Get weather</button> {/* Button to trigger fetching weather data */}\n\n      {isLoading && <p className=\"loader\">Loading...</p>} {/* Display loading text if data is being fetched */}\n\n      {weather.weathercode && (\n        <Weather weather={weather} location={displayLocation} /> // Display weather if data is available\n      )}\n    </div>\n  );\n}\n\nexport default App; // Export the App component as the default export\n\n// Weather component to display the weather information\nfunction Weather({ weather, location }) {\n  // Destructure weather data properties for easier access\n  const {\n    temperature_2m_max: max, // Maximum temperatures\n    temperature_2m_min: min, // Minimum temperatures\n    time: dates, // Dates\n    weathercode: codes, // Weather codes\n  } = weather;\n\n  return (\n    <div>\n      <h2>Weather {location}</h2> {/* Title showing the location */}\n      <ul className=\"weather\">\n        {/* Map through each date to create a Day component */}\n        {dates.map((date, i) => (\n          <Day\n            date={date} // Pass the date to the Day component\n            max={max.at(i)} // Pass the max temperature for the day\n            min={min.at(i)} // Pass the min temperature for the day\n            code={codes.at(i)} // Pass the weather code for the day\n            key={date} // Set a unique key for each list item\n            isToday={i === 0} // Highlight the first item as \"Today\"\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n// Day component to display each day's weather information\nfunction Day({ date, max, min, code, isToday }) {\n  return (\n    <li className=\"day\">\n      <span>{getWeatherIcon(code)}</span> {/* Display weather icon based on the code */}\n      <p>{isToday ? \"Today\" : formatDay(date)}</p> {/* Display \"Today\" or the day of the week */}\n      <p>\n        {Math.floor(min)}&deg; &mdash; <strong>{Math.ceil(max)}&deg;</strong> {/* Display temperature range */}\n      </p>\n    </li>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}