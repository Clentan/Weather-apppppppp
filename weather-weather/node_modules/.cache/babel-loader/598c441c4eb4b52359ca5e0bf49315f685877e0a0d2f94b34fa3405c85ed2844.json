{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\clent\\\\OneDrive\\\\Desktop\\\\Weather\\\\weather-weather\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherForecast = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const API_KEY = '6a4306a0f2c73c28dc5c3bbf739e87d0';\n  const LAT = '35.6895'; // Replace with desired latitude\n  const LON = '139.6917'; // Replace with desired longitude\n  const DAYS = 7;\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast/daily?lat=${LAT}&lon=${LON}&cnt=${DAYS}&appid=${API_KEY}&units=metric`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setWeatherData(data);\n        setLoading(false);\n      } catch (err) {\n        setError(err);\n        setLoading(false);\n      }\n    };\n    fetchWeatherData();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error fetching weather data!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"7-Day Weather Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), weatherData && weatherData.list.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: new Date(day.dt * 1000).toLocaleDateString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", day.temp.day, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Weather: \", day.weather[0].description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Humidity: \", day.humidity, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Wind Speed: \", day.speed, \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherForecast, \"5D/vak42bx6E1PZA6agARYhQL9Q=\");\n_c = WeatherForecast;\nexport default WeatherForecast;\nvar _c;\n$RefreshReg$(_c, \"WeatherForecast\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WeatherForecast","_s","weatherData","setWeatherData","loading","setLoading","error","setError","API_KEY","LAT","LON","DAYS","fetchWeatherData","response","fetch","ok","Error","data","json","err","children","fileName","_jsxFileName","lineNumber","columnNumber","list","map","day","index","Date","dt","toLocaleDateString","temp","weather","description","humidity","speed","_c","$RefreshReg$"],"sources":["C:/Users/clent/OneDrive/Desktop/Weather/weather-weather/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst WeatherForecast = () => {\n  const [weatherData, setWeatherData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const API_KEY = '6a4306a0f2c73c28dc5c3bbf739e87d0';\n  const LAT = '35.6895'; // Replace with desired latitude\n  const LON = '139.6917'; // Replace with desired longitude\n  const DAYS = 7;\n\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        const response = await fetch(\n          `https://api.openweathermap.org/data/2.5/forecast/daily?lat=${LAT}&lon=${LON}&cnt=${DAYS}&appid=${API_KEY}&units=metric`\n        );\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        const data = await response.json();\n        setWeatherData(data);\n        setLoading(false);\n      } catch (err) {\n        setError(err);\n        setLoading(false);\n      }\n    };\n\n    fetchWeatherData();\n  }, []);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error fetching weather data!</p>;\n\n  return (\n    <div>\n      <h1>7-Day Weather Forecast</h1>\n      {weatherData && weatherData.list.map((day, index) => (\n        <div key={index}>\n          <h2>{new Date(day.dt * 1000).toLocaleDateString()}</h2>\n          <p>Temperature: {day.temp.day}Â°C</p>\n          <p>Weather: {day.weather[0].description}</p>\n          <p>Humidity: {day.humidity}%</p>\n          <p>Wind Speed: {day.speed} m/s</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default WeatherForecast;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}